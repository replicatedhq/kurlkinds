/*
Copyright 2020 Replicated Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	scheme "github.com/replicatedhq/kurlkinds/client/kurlclientset/scheme"
	v1beta1 "github.com/replicatedhq/kurlkinds/pkg/apis/cluster/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// InstallersGetter has a method to return a InstallerInterface.
// A group's client should implement this interface.
type InstallersGetter interface {
	Installers(namespace string) InstallerInterface
}

// InstallerInterface has methods to work with Installer resources.
type InstallerInterface interface {
	Create(ctx context.Context, installer *v1beta1.Installer, opts v1.CreateOptions) (*v1beta1.Installer, error)
	Update(ctx context.Context, installer *v1beta1.Installer, opts v1.UpdateOptions) (*v1beta1.Installer, error)
	UpdateStatus(ctx context.Context, installer *v1beta1.Installer, opts v1.UpdateOptions) (*v1beta1.Installer, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta1.Installer, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta1.InstallerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.Installer, err error)
	InstallerExpansion
}

// installers implements InstallerInterface
type installers struct {
	client rest.Interface
	ns     string
}

// newInstallers returns a Installers
func newInstallers(c *ClusterV1beta1Client, namespace string) *installers {
	return &installers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the installer, and returns the corresponding installer object, and an error if there is any.
func (c *installers) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.Installer, err error) {
	result = &v1beta1.Installer{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("installers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Installers that match those selectors.
func (c *installers) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.InstallerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.InstallerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("installers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested installers.
func (c *installers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("installers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a installer and creates it.  Returns the server's representation of the installer, and an error, if there is any.
func (c *installers) Create(ctx context.Context, installer *v1beta1.Installer, opts v1.CreateOptions) (result *v1beta1.Installer, err error) {
	result = &v1beta1.Installer{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("installers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(installer).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a installer and updates it. Returns the server's representation of the installer, and an error, if there is any.
func (c *installers) Update(ctx context.Context, installer *v1beta1.Installer, opts v1.UpdateOptions) (result *v1beta1.Installer, err error) {
	result = &v1beta1.Installer{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("installers").
		Name(installer.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(installer).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *installers) UpdateStatus(ctx context.Context, installer *v1beta1.Installer, opts v1.UpdateOptions) (result *v1beta1.Installer, err error) {
	result = &v1beta1.Installer{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("installers").
		Name(installer.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(installer).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the installer and deletes it. Returns an error if one occurs.
func (c *installers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("installers").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *installers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("installers").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched installer.
func (c *installers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.Installer, err error) {
	result = &v1beta1.Installer{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("installers").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
